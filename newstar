#! /usr/bin/env python

'''
OpenStack Nova shell, taking an excuse to make usability improvements
'''

import os, sys
from os.path import expanduser
from subprocess import Popen, PIPE, call
import time
import cli
from argparse import ArgumentParser
import getpass
import threading, Queue
import yaml

# TODO Show all VMs and filter by status
# TODO Display ERROR details (+ dates)
# TODO Parellelise those commands which aren't yet
# TODO Display quotas
# TODO Fixed dodgy interrupt on some queries

DIR = expanduser('~/.newstar')
SERVERARGS = 'server',
SERVERKWARGS = {'nargs': '+'}

def join(queue):
    try:
        while not queue.empty():
            time.sleep(1) # Interruptible
    except KeyboardInterrupt:
        while not queue.empty():
            queue.get()
            queue.task_done()
    queue.join()

def listworker(vms, listqueue, lock, temp):
    while True:
        url, service, tenant, servers, doprint, dolserror, dolsbuild, \
            dolsdeleted, dolsreboot, dolsshutoff, verbose = listqueue.get()

        # Set tenant
        tenant = tenant['name']

        # Run nova
        proc = Popen(['nova', '--os-auth-url', url, '--os-tenant-name', tenant,
                      'list'], stdout=PIPE)

        output = ''

        # Title
        if verbose:
            output += "%s, %s:\n" % (tenant, service.capitalize())

        # Handle header
        try:
            for _ in range(3):
                line = proc.stdout.next()
                if verbose:
                    output += line
        except StopIteration: # Handle empty projects
            pass

        # Print VMs
        for line in proc.stdout:
            try:
                server = line.split('|')[2].strip()
                status = line.split('|')[3].strip()
                lock.acquire()
                vms[server] = service, url, tenant
                lock.release()
                filtered, match = False, False
                if doprint:
                    if dolserror:
                        filtered = True
                        match |= status == 'ERROR'

                    if dolsbuild:
                        filtered = True
                        match |= status == 'BUILD'

                    if dolsdeleted:
                        filtered = True
                        match |= status == 'DELETED'

                    if dolsreboot:
                        filtered = True
                        match |= status in ('HARD_REBOOT', 'REBOOT')

                    if dolsshutoff:
                        filtered = True
                        match |= status == 'SHUTOFF'

                    if servers:
                        filtered = True
                        match |= server in servers

                    if match or not filtered:
                        if verbose:
                            output += line
                        else:
                            output += server + '\n'
            except IndexError:
                if verbose:
                    output += line

        # Wait for process to avoid zombies
        proc.communicate()

        if verbose:
            output += '\n'

        lock.acquire()
        if doprint and output:
            tempfhl = open(temp, 'a')
            for fhl in sys.stdout, tempfhl:
                print >> fhl, output,
            tempfhl.close()
        lock.release()

        listqueue.task_done()

def vmworker(vms, vmqueue, lock, temp):
    '''
    VM thread worker
    '''

    while True:
        operation, server, arguments = vmqueue.get()

        try:
            service, url, tenant = vms[server]

            null = open(os.devnull, 'w')
            # Would receive a KeyboardInterrupt too but that's fine
            proc = Popen(['nova', '--os-auth-url', url, '--os-tenant-name',
                          tenant] + operation + [server] + arguments,
                          stdout=PIPE, stderr=PIPE)

            # Wait for process to avoid zombies
            output, error = proc.communicate()

            # Print output
            null.close()
            if output or error: # Make sure not empty if KeyboardInterrupted
                lock.acquire()
                tempfhl = open(temp, 'a')
                for fhl in sys.stdout, tempfhl:
                    print >> fhl, ">>> %s, in %s, %s:" % \
                        (server, tenant, service.capitalize())
                    print >> fhl, output.strip()
                    print >> fhl, error.strip()
                    print >> fhl, "<<< %s, in %s, %s:" % \
                        (server, tenant, service.capitalize())
                    print >> fhl
                tempfhl.close()
                lock.release()
        except KeyError:
            pass
        vmqueue.task_done()

class Newstar(cli.Cli):
    '''
    CLI
    '''

    def __init__(self, args):
        '''
        Init CLI
        '''

        cli.Cli.__init__(self, history=True, bell=True, time=True)

        # Argument parsers
        self.listparser.add_argument('-v', '--verbose', action='store_true',
                                     help="display VM details" )
        self.listparser.add_argument('-e', '--error', action='store_true',
                                     help="only display VMs in ERROR state")
        self.listparser.add_argument('-b', '--build', action='store_true',
                                     help="only display VMs in BUILD state")
        self.listparser.add_argument('-d', '--deleted', action='store_true',
                                     help="only display VMs in DELETED state")
        self.listparser.add_argument('-r', '--reboot', action='store_true',
                                     help="only display VMs in REBOOT states")
        self.listparser.add_argument('-s', '--shutoff', action='store_true',
                                     help="only display VMs in SHUTOFF state")
        self.listparser.add_argument(*SERVERARGS, nargs='*')
        self.listparser.description = "List VMs."

        self.showparser.add_argument(*SERVERARGS, **SERVERKWARGS)
        self.showparser.description = "Show VM details."

        self.rebootparser.add_argument('--hard', action='store_true',
                                       help="reboot hard")
        self.rebootparser.add_argument(*SERVERARGS, **SERVERKWARGS)
        self.rebootparser.description = "Reboot VMs."

        self.authenticateparser.add_argument('-l', '--login')
        self.authenticateparser.description = "Authenticate against OpenStack."

        self.consoleparser.add_argument(*SERVERARGS, **SERVERKWARGS)
        self.consoleparser.description = "Dump console."

        self.lstenantsparser.description = "List known tenants."

        # Initialise VM-tenant mapping
        self.vms = {}

        # Credentials
        os.environ['OS_USERNAME'] = getpass.getuser()

        # Config file
        yamlfile = self.directory + '/newstar.yaml'
        if os.path.exists(yamlfile):
            self.config = yaml.load(open(yamlfile))
            self.services = self.config['services']
        else:
            print >> sys.stderr, "Couldn't find %s" % yamlfile
            sys.exit(1)

        # Common thread objects
        self.lock = threading.Lock()

        # Start threads to permanently pull VMs to show the info of
        self.vmqueue = Queue.Queue()
        for _ in range(self.config['threads']['vm']):
            thread = threading.Thread(target=vmworker,
                                      args=(self.vms, self.vmqueue, self.lock,
                                            self.temp))
            thread.daemon = True # Stop thread when parent process ends
            thread.start()

        # Start threads to permanently list tenants
        self.listqueue = Queue.Queue()
        for _ in range(self.config['threads']['list']):
            thread = threading.Thread(target=listworker,
                                      args=(self.vms, self.listqueue,
                                            self.lock, self.temp))
            thread.daemon = True # Stop thread when parent process ends
            thread.start()

    def authck(self):
        '''
        Check if user has authenticated
        '''

        # Check authentication
        if 'OS_PASSWORD' not in os.environ:
            print >> sys.stderr, "You need to authenticate first"
            return False
        else:
            return True

    def _list(self, servers=[], doprint=False, dolserror=False, dolsbuild=False,
              dolsdeleted=False, dolsreboot=False, dolsshutoff=False,
              verbose=False):
        '''
        List VMs
        '''

        self.tempreset()
        for service in self.services:
            url = self.services[service]['url']
            tenants = self.services[service]['tenants']
            for tenant in tenants:
                self.listqueue.put((url, service, tenant, servers, doprint,
                                    dolserror, dolsbuild, dolsdeleted,
                                    dolsreboot, dolsshutoff, verbose))

        join(self.listqueue)

    def _nudgevm(self, args, operation, arguments=[]):
        '''
        Query on a per-VM basis
        '''

        if not self.authck():
            return

        # Update VM-tenant mapping
        if not self.vms:
            self._list(doprint=False)

        # Collect requested servers into queue
        self.tempreset()
        for server in args.server:
            self.vmqueue.put((operation, server, arguments))

        # Wait until queue is drained
        join(self.vmqueue)

    def run_show(self, args):
        '''
        Show VMs info
        '''

        self._nudgevm(args, ['show'])

    def run_console(self, args):
        '''
        Dump console
        '''

        self._nudgevm(args, ['console-log'])

    def run_list(self, args):
        '''
        List VMs
        '''

        # TODO Doesn't always behave well with interrupts

        if not self.authck():
            return

        # List VMs in all tenants of all OpenStack services
        self._list(args.server, doprint=True, dolserror=args.error,
                   dolsbuild=args.build, dolsdeleted=args.deleted,
                   dolsreboot=args.reboot, dolsshutoff=args.shutoff,
                   verbose=args.verbose)

    def run_authenticate(self, args): # pylint: disable=R0201
        '''
        Authenticate
        '''

        if args.login:
            os.environ['OS_USERNAME'] = args.login
        else:
            os.environ['OS_USERNAME'] = getpass.getuser()
        os.environ['OS_PASSWORD'] = getpass.getpass()

    def run_lstenants(self, args):
        '''
        List known tenants
        '''

        # Size up
        maxtenant = 0
        for service in self.services:
            tenants = self.services[service]['tenants']
            for tenant in tenants:
                length = len(tenant['name'])
                maxtenant = length if length > maxtenant else maxtenant

        # Print
        fmt = "{{tenant:{width}}}  {{service}}".format(width=maxtenant)
        for service in self.services:
            tenants = self.services[service]['tenants']
            for tenant in tenants:
                print fmt.format(tenant=tenant['name'],
                                 service=service.capitalize())

    def run_reboot(self, args):
        '''
        Reboot VMs
        '''

        self._nudgevm(args, ['reboot'] + (['--hard'] if args.hard else []))

def main():
    '''
    Main function
    '''

    parser = ArgumentParser(description="Nova shell")
    args = parser.parse_args()
    Newstar(args).loop()

if __name__ == '__main__':
    sys.exit(main())
