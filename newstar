#! /usr/bin/env python

import os, sys
from os.path import expanduser
from subprocess import Popen, PIPE
import cmd
import argparse, shlex
import getpass
import yaml

class Cli(cmd.Cmd):
    def __init__(self):
        cmd.Cmd.__init__(self)

        # Set prompt and window title
        self.prompt = 'nova% '
        print "\033]0;nova\007\r",

        # Argument parsers
        self.listparser = argparse.ArgumentParser()
        self.listparser.add_argument('-v', '--verbose', action='store_true')

        # Common setup
        os.environ['OS_CACERT'] = '/path/to/certificate.pem'

        # Tenant files
        self.services = yaml.load(open(expanduser('~/.newstar.yaml')))

    def do_list(self, line):
        # Parse arguments
        try:
            args = self.listparser.parse_args(shlex.split(line))
        except SystemExit:
            return

        # Check authentication
        if 'OS_USERNAME' not in os.environ and 'OS_PASSWORD' not in os.environ:
            print >> sys.stderr, "You need to authenticate first"
            return
        
        # List VMs in all tenants of all OpenStack services
        for service in self.services:
            os.environ['OS_AUTH_URL'] = self.services[service]['url']
            tenants = self.services[service]['tenants']
            for tenant in tenants:
                if args.verbose:
                    print "%s in %s:" % (tenant['name'], service.capitalize())

                # Set tenant
                os.environ['OS_TENANT_ID'] = tenant['id']
                os.environ['OS_TENANT_NAME'] = tenant['name']

                # Run nova
                proc = Popen(['nova', 'list'], stdout=PIPE)

                if not args.verbose:
                    # Skip header
                    for _ in range(2):
                        proc.stdout.next()

                # Print VMs
                for line in proc.stdout:
                    if args.verbose:
                        print line,
                    else:
                        try:
                            print line.split('|')[2].strip()
                        except IndexError:
                            pass

                if args.verbose:
                    print

    def do_authenticate(self, line):
        os.environ['OS_USERNAME'] = raw_input('login: ')
        os.environ['OS_PASSWORD'] = getpass.getpass()

    def do_EOF(self, _):
        print
        sys.exit(0)

def main():
    cli = Cli()

    while True:
        try:
            cli.cmdloop()
        except KeyboardInterrupt:
            print

if __name__ == '__main__':
    sys.exit(main())
